# Fit survival data using the Kaplan-Meier method
surv_object <- Surv(time = addicts$time, event = addicts$status)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
# DOSE !
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# PRISON
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("No prison record", "Prison record"), lty = c(2,1), bty = "n")
# C1:PRISON
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c1), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]",  xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("C1 - No prison record", "C1 - Prison record"), lty = c(2,1), bty = "n")
# C2:PRISON
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c2), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c2$time) * 1.05))
legend("bottomleft", c("C2 - No prison record", "C2 - Prison record"), lty = c(2,1), bty = "n")
# C1:DOSE
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c1), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# C2:DOSE
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c2), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# Clinic, une autre facon davoir ce plot
KM_clinic <- survfit(surv_object ~ clinic, data = addicts)
summary(KM_clinic)
ggsurvplot(KM_clinic, data = addicts, pval = TRUE, strata = "Clinic")
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group,
data = addicts)
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group,
data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
hist(addicts$dose, xlab="dose per day [mg]", ylab = "nb. of patients", breaks = 20)
hist(addicts_nocens$time, xlab="Treatment time  [days]", ylab = "nb. of patients")
hist(addicts_cens$time, xlab="Censored treatment time  [days]", ylab = "nb. of patients")
quantile(addicts$dose)
boxplot(addicts$dose)
#Boxplots, no censoring
boxplot(data = addicts, time ~ clinic, xlab = "Clinic ID number", ylab= "Treatment time [days]")
boxplot(data = addicts, time ~ prison, xlab = "Prison background", ylab= "Treatment time [days]", names= c("no", "yes"))
boxplot(data = addicts, time ~ dose_group, xlab = "Dose per day", ylab= "Treatment time [days]", names= c("<50 mg", " 50-69 mg", ">=70 mg"))
quantile(addicts$dose)
boxplot(addicts$dose)
chisq.test(table(addicts$time, addicts$status))
test.ph
fit.coxph
install.packages("survminer")
library(survival)
library(survminer)
library(dplyr)
addicts <- data_addicts
names(addicts) <- c("id", "clinic", "status", "time","prison", "dose")
addicts <- rbind(addicts, c(1,1, 1,  428, 0,  50))
addicts$dose_group <- cut(addicts$dose, c(0, 50, 69, 120), labels=c("low", "middle", "high"))
addicts_c1 <- subset(addicts, clinic == 1 )
addicts_c2 <- subset(addicts, clinic == 2 )
addicts_nocens <- subset(addicts, status == 1 )
addicts_cens <- subset(addicts, status == 0 )
addicts_prison <- subset(addicts, prison == 1 )
addicts_noprison <- subset(addicts, prison == 0 )
# Fit survival data using the Kaplan-Meier method
surv_object <- Surv(time = addicts$time, event = addicts$status)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
# DOSE !
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# PRISON
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("No prison record", "Prison record"), lty = c(2,1), bty = "n")
# C1:PRISON
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c1), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]",  xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("C1 - No prison record", "C1 - Prison record"), lty = c(2,1), bty = "n")
# C2:PRISON
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c2), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c2$time) * 1.05))
legend("bottomleft", c("C2 - No prison record", "C2 - Prison record"), lty = c(2,1), bty = "n")
# C1:DOSE
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c1), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# C2:DOSE
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c2), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# Clinic, une autre facon davoir ce plot
KM_clinic <- survfit(surv_object ~ clinic, data = addicts)
summary(KM_clinic)
ggsurvplot(KM_clinic, data = addicts, pval = TRUE, strata = "Clinic")
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group,
data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group,
data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
fit.coxph <- coxph(surv_object ~ clinic)
fit.coxph <- coxph(surv_object ~ Clinic)
#hazard ratios
#fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
fit.coxph <- coxph(surv_object ~ clinic, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
help("ggsoxzph")
help("ggcoxzph")
#hazard ratios
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggcoxzph(test.ph)
help("ggcoxzph")
ggcoxzph(test.ph)
help("ggcoxzph")
ggcoxzph(test.ph, ggpar(ylab=c("clinic", "prison", "dose group")))
help("ggapr")
help("ggcoxzph")
ggpar(ggcoxzph(test.ph), ylab=c("clinic", "prison", "dose group"))
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
ggcoxzph(test.ph)
addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_level, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
#addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
install.packages("survminer")
library(survival)
library(survminer)
library(dplyr)
addicts <- data_addicts
names(addicts) <- c("id", "clinic", "status", "time","prison", "dose")
addicts <- rbind(addicts, c(1,1, 1,  428, 0,  50))
addicts$dose_group <- cut(addicts$dose, c(0, 50, 69, 120), labels=c("low", "middle", "high"))
addicts_c1 <- subset(addicts, clinic == 1 )
addicts_c2 <- subset(addicts, clinic == 2 )
addicts_nocens <- subset(addicts, status == 1 )
addicts_cens <- subset(addicts, status == 0 )
addicts_prison <- subset(addicts, prison == 1 )
addicts_noprison <- subset(addicts, prison == 0 )
# Fit survival data using the Kaplan-Meier method
surv_object <- Surv(time = addicts$time, event = addicts$status)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
# DOSE !
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# PRISON
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("No prison record", "Prison record"), lty = c(2,1), bty = "n")
# C1:PRISON
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c1), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]",  xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("C1 - No prison record", "C1 - Prison record"), lty = c(2,1), bty = "n")
# C2:PRISON
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c2), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c2$time) * 1.05))
legend("bottomleft", c("C2 - No prison record", "C2 - Prison record"), lty = c(2,1), bty = "n")
# C1:DOSE
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c1), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# C2:DOSE
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c2), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# Clinic, une autre facon davoir ce plot
KM_clinic <- survfit(surv_object ~ clinic, data = addicts)
summary(KM_clinic)
ggsurvplot(KM_clinic, data = addicts, pval = TRUE, strata = "Clinic")
#addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
hist(addicts$dose, xlab="dose per day [mg]", ylab = "nb. of patients", breaks = 20)
hist(addicts_nocens$time, xlab="Treatment time  [days]", ylab = "nb. of patients")
hist(addicts_cens$time, xlab="Censored treatment time  [days]", ylab = "nb. of patients")
#Boxplots, no censoring
boxplot(data = addicts, time ~ clinic, xlab = "Clinic ID number", ylab= "Treatment time [days]")
boxplot(data = addicts, time ~ prison, xlab = "Prison background", ylab= "Treatment time [days]", names= c("no", "yes"))
boxplot(data = addicts, time ~ dose_group, xlab = "Dose per day", ylab= "Treatment time [days]", names= c("<50 mg", " 50-69 mg", ">=70 mg"))
quantile(addicts$dose)
boxplot(addicts$dose)
chisq.test(table(addicts$time, addicts$status))
chisq.test(table(addicts$time, addicts$id))
#addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
View(bxpecho)
View(bxpseeding)
View(clouds)
View(fit.coxph)
View(hmod)
View(fit1)
View(KM_clinic)
install.packages("survminer")
install.packages("survminer")
library(survival)
library(survminer)
library(dplyr)
library(dplyr)
addicts <- data_addicts
library(readxl)
data_addicts <- read_excel("Documents/Etudes/Biostat/Projet2/data_addicts.xlsx")
View(data_addicts)
addicts <- data_addicts
names(addicts) <- c("id", "clinic", "status", "time","prison", "dose")
addicts <- rbind(addicts, c(1,1, 1,  428, 0,  50))
addicts$dose_group <- cut(addicts$dose, c(0, 50, 69, 120), labels=c("low", "middle", "high"))
addicts_c1 <- subset(addicts, clinic == 1 )
addicts_c2 <- subset(addicts, clinic == 2 )
addicts_nocens <- subset(addicts, status == 1 )
addicts_cens <- subset(addicts, status == 0 )
addicts_prison <- subset(addicts, prison == 1 )
addicts_noprison <- subset(addicts, prison == 0 )
# Fit survival data using the Kaplan-Meier method
surv_object <- Surv(time = addicts$time, event = addicts$status)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
# DOSE !
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# PRISON
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("No prison record", "Prison record"), lty = c(2,1), bty = "n")
# C1:PRISON
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c1), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]",  xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("C1 - No prison record", "C1 - Prison record"), lty = c(2,1), bty = "n")
# C2:PRISON
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c2), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c2$time) * 1.05))
legend("bottomleft", c("C2 - No prison record", "C2 - Prison record"), lty = c(2,1), bty = "n")
# C1:DOSE
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c1), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# C2:DOSE
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c2), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# Clinic, une autre facon davoir ce plot
KM_clinic <- survfit(surv_object ~ clinic, data = addicts)
summary(KM_clinic)
ggsurvplot(KM_clinic, data = addicts, pval = TRUE, strata = "Clinic")
#addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
test.ph <- cox.zph(fit.coxph)
ggcoxzph(test.ph)
ggforest(fit.coxph, data = addicts)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
# DOSE !
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# PRISON
survdiff(Surv(time = addicts$time, event = addicts$status) ~ addicts$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("No prison record", "Prison record"), lty = c(2,1), bty = "n")
# C1:PRISON
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c1), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]",  xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("C1 - No prison record", "C1 - Prison record"), lty = c(2,1), bty = "n")
# C2:PRISON
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$prison)
plot(survfit(Surv(time, status) ~ prison, data = addicts_c2), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c2$time) * 1.05))
legend("bottomleft", c("C2 - No prison record", "C2 - Prison record"), lty = c(2,1), bty = "n")
# C1:DOSE
survdiff(Surv(time = addicts_c1$time, event = addicts_c1$status) ~ addicts_c1$dose_group)
plot(survfit(Surv(time, status) ~ dose_group, data = addicts_c1), lty = c(1,2,3), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts_c1$time) * 1.05))
legend("bottomleft", c("low dose", "middle dose", "high dose"), lty = c(1,2,3), bty = "n")
# C2:DOSE
survdiff(Surv(time = addicts_c2$time, event = addicts_c2$status) ~ addicts_c2$dose_group)
#addicts$dose_level <- cut(addicts$dose, c(0, 69, 120), labels=c("low_middle", "high"))
fit.coxph <- coxph(surv_object ~ clinic + prison + dose_group, data = addicts)
View(fit.coxph)
summary(fit.coxph)
addicts_c1 <- subset(addicts, clinic == 1 )
addicts_c2 <- subset(addicts, clinic == 2 )
addicts_nocens <- subset(addicts, status == 1 )
addicts_cens <- subset(addicts, status == 0 )
addicts_prison <- subset(addicts, prison == 1 )
addicts_noprison <- subset(addicts, prison == 0 )
# Fit survival data using the Kaplan-Meier method
surv_object <- Surv(time = addicts$time, event = addicts$status)
# CLINIC
survdiff(surv_object ~ addicts$clinic)
plot(survfit(Surv(time, status) ~ clinic, data = addicts), lty = c(2,1), ylab = "Probability", xlab = "Survival Time [days]", xlim= c(0, max(addicts$time) * 1.05))
legend("bottomleft", c("Clinic 1", "Clinic 2"), lty = c(2,1), bty = "n")
R.version.string
library(RSMLM)
install.packages("RSMLM")
R.version.string
len(alphas)
size(alphas)
length(alphas)
shape(alphas)
alphas <- c(0.55, 0.6, 0.65, 0.7, 0.75,  0.8, 0.85, 0.9, 0.95)
length(alphas)
help("data.frame")
library("dbscan")
library("deldir")
library("igraph")
library("geometry")
library("ggplot2")
library("randomcoloR")
library("RSMLM")
library("dbscan")
library("deldir")
library("igraph")
library("geometry")
library("ggplot2")
library("randomcoloR")
library("RSMLM")
clusterVoronoi <- function(coords, threshold, densityChoice) {
numDimensions <- dim(coords)[2]
if (numDimensions != 2) {
stop('Coordinates should be 2D')
}
if (sum(duplicatedxy(coords[, 1], coords[, 2])) > 0) {
stop("Coords list should not contain duplicated points")
}
numDetections <- dim(coords)[1]
# compute veronoi tesselation using deldir library
vtess <- deldir(coords[, 1], coords[, 2])
# retrieve area of Voronoi tiles
tileAreas <- vtess$summary$dir.area
# create igraph object corresponding to the Delaunay triangulation
g <- make_empty_graph(n = numDetections, directed = FALSE)
g <- add_edges(g, c(rbind(vtess$delsgs$ind1, vtess$delsgs$ind2)))
# to hold density estimate
density <- rep(0, numDetections)
# calculate neighbours for each detection in the graph
neigh <- adjacent_vertices(g, seq(1, numDetections, by = 1))
# use first rank tile area for density calculation
if (densityChoice == 1) {
for (i in 1 : numDetections) {
density[i] <- (1 + length(neigh[[i]])) / (tileAreas[i] + sum(tileAreas[neigh[[i]]]))
}
# use tile area for density calculation
} else if (densityChoice == 0) {
density <- 1 / tileAreas
}
# delete tiles with area larger than specified maxiumum
tileIndices <-  density > threshold
g <- delete_vertices(g, which(!tileIndices))
# compute the connected components of the graph
ccs <- components(g)
# extract cluster indices as vector with zero value representing no cluster assignment
clusterIndices <- rep(0, numDetections)
clusterIndices[which(tileIndices)] <- ccs$membership
return(clusterIndices)
}
library(RSMLM)
setwd('/Users/Eliana/Documents/PDM/Codes/My_codes/Power_Of_Seperation')
folder_name <- 'DataForTomato/'
NumberOfRuns <- 30
# density factor - threshold for object
density_factor <- 0.5
default_area <- (30+30) * (30+ 105 + 30)
distance <- 85
alphas <- c(0.55, 0.6, 0.65, 0.7, 0.75,  0.8, 0.85, 0.9, 0.95)
resultss <- vector(mode = "list", length = length(alphas))
alphas[0]* 100
alphas[0]
alphas
alphas(0)
alphas(0)
alphas[1]
alphas[1] * 100
for (run in 0: (NumberOfRuns - 1)) {
print(run)
name = paste("dist_", distance, "_sim_", run, sep = "")
data <- read.csv(paste(folder_name, name, ".csv", sep=""), header = TRUE)
detectionList <- data
coords <- as.matrix(detectionList[, c('x', 'y')])
N <- dim(coords)[1]
mean_density <- N/default_area
for (alpha in alphas) {
res <- clusterVoronoi(coords, alpha * mean_density, 1)
plotClusterScatter(coords, res)
filename <- paste("voronoi_analysis/gridsearch_alpha_dist85/voronoi_alpha_", (alpha * 100), "_sim_", run, ".csv", sep = "")
write.csv(res, filename)
}
}
library("dbscan")
library("deldir")
library("igraph")
library("geometry")
library("ggplot2")
library("randomcoloR")
library("RSMLM")
clusterVoronoi <- function(coords, threshold, densityChoice) {
numDimensions <- dim(coords)[2]
if (numDimensions != 2) {
stop('Coordinates should be 2D')
}
if (sum(duplicatedxy(coords[, 1], coords[, 2])) > 0) {
stop("Coords list should not contain duplicated points")
}
numDetections <- dim(coords)[1]
# compute veronoi tesselation using deldir library
vtess <- deldir(coords[, 1], coords[, 2])
# retrieve area of Voronoi tiles
tileAreas <- vtess$summary$dir.area
# create igraph object corresponding to the Delaunay triangulation
g <- make_empty_graph(n = numDetections, directed = FALSE)
g <- add_edges(g, c(rbind(vtess$delsgs$ind1, vtess$delsgs$ind2)))
# to hold density estimate
density <- rep(0, numDetections)
# calculate neighbours for each detection in the graph
neigh <- adjacent_vertices(g, seq(1, numDetections, by = 1))
# use first rank tile area for density calculation
if (densityChoice == 1) {
for (i in 1 : numDetections) {
density[i] <- (1 + length(neigh[[i]])) / (tileAreas[i] + sum(tileAreas[neigh[[i]]]))
}
# use tile area for density calculation
} else if (densityChoice == 0) {
density <- 1 / tileAreas
}
# delete tiles with area larger than specified maxiumum
tileIndices <-  density > threshold
g <- delete_vertices(g, which(!tileIndices))
# compute the connected components of the graph
ccs <- components(g)
# extract cluster indices as vector with zero value representing no cluster assignment
clusterIndices <- rep(0, numDetections)
clusterIndices[which(tileIndices)] <- ccs$membership
return(clusterIndices)
}
library(RSMLM)
setwd('/Users/Eliana/Documents/PDM/Codes/My_codes/Power_Of_Seperation')
folder_name <- 'DataForTomato/'
NumberOfRuns <- 30
# density factor - threshold for object
density_factor <- 0.55
default_area <- (30+30) * (30+ 105 + 30)
distances <- c(50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105)
for (dist in distances) {
for (run in 0: (NumberOfRuns - 1)) {
print(run)
name = paste("dist_", dist, "_sim_", run, sep = "")
data <- read.csv(paste(folder_name, name, ".csv", sep=""), header = TRUE)
detectionList <- data
coords <- as.matrix(detectionList[, c('x', 'y')])
N <- dim(coords)[1]
#area <- (max(coords[,1])- min(coords[,1])) * (max(coords[,2])- min(coords[,2]))
mean_density <- N/default_area
res <- clusterVoronoi(coords, density_factor * mean_density, 1)
plotClusterScatter(coords, res)
filename <- paste("voronoi_analysis/denstiy_factor_055/voronoi_dist_", dist, "_sim_", run, ".csv", sep = "")
write.csv(res, filename)
}
}
for (dist in distances) {
for (run in 0: (NumberOfRuns - 1)) {
print(run)
name = paste("dist_", dist, "_sim_", run, sep = "")
data <- read.csv(paste(folder_name, name, ".csv", sep=""), header = TRUE)
detectionList <- data
coords <- as.matrix(detectionList[, c('x', 'y')])
N <- dim(coords)[1]
#area <- (max(coords[,1])- min(coords[,1])) * (max(coords[,2])- min(coords[,2]))
mean_density <- N/default_area
res <- clusterVoronoi(coords, density_factor * mean_density, 1)
plotClusterScatter(coords, res)
filename <- paste("voronoi_analysis/density_factor_055/voronoi_dist_", dist, "_sim_", run, ".csv", sep = "")
write.csv(res, filename)
}
}
